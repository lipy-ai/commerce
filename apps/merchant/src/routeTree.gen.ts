/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as loggedInRouteImport } from './routes/(loggedIn)/route'
import { Route as loggedInIndexImport } from './routes/(loggedIn)/index'
import { Route as loggedInAccountRouteImport } from './routes/(loggedIn)/account/route'
import { Route as loggedInProductIndexImport } from './routes/(loggedIn)/product/index'
import { Route as loggedInOrderIndexImport } from './routes/(loggedIn)/order/index'
import { Route as loggedInCustomerIndexImport } from './routes/(loggedIn)/customer/index'
import { Route as loggedInAccountIndexImport } from './routes/(loggedIn)/account/index'
import { Route as loggedInProductIdImport } from './routes/(loggedIn)/product/$id'
import { Route as loggedInOrderIdImport } from './routes/(loggedIn)/order/$id'
import { Route as loggedInAccountSecurityImport } from './routes/(loggedIn)/account/security'
import { Route as loggedInAccountPreferencesImport } from './routes/(loggedIn)/account/preferences'

// Create/Update Routes

const loggedInRouteRoute = loggedInRouteImport.update({
  id: '/(loggedIn)',
  getParentRoute: () => rootRoute,
} as any)

const loggedInIndexRoute = loggedInIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInAccountRouteRoute = loggedInAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInProductIndexRoute = loggedInProductIndexImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInOrderIndexRoute = loggedInOrderIndexImport.update({
  id: '/order/',
  path: '/order/',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInCustomerIndexRoute = loggedInCustomerIndexImport.update({
  id: '/customer/',
  path: '/customer/',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInAccountIndexRoute = loggedInAccountIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => loggedInAccountRouteRoute,
} as any)

const loggedInProductIdRoute = loggedInProductIdImport.update({
  id: '/product/$id',
  path: '/product/$id',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInOrderIdRoute = loggedInOrderIdImport.update({
  id: '/order/$id',
  path: '/order/$id',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInAccountSecurityRoute = loggedInAccountSecurityImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => loggedInAccountRouteRoute,
} as any)

const loggedInAccountPreferencesRoute = loggedInAccountPreferencesImport.update(
  {
    id: '/preferences',
    path: '/preferences',
    getParentRoute: () => loggedInAccountRouteRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(loggedIn)': {
      id: '/(loggedIn)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof loggedInRouteImport
      parentRoute: typeof rootRoute
    }
    '/(loggedIn)/account': {
      id: '/(loggedIn)/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof loggedInAccountRouteImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/': {
      id: '/(loggedIn)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof loggedInIndexImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/account/preferences': {
      id: '/(loggedIn)/account/preferences'
      path: '/preferences'
      fullPath: '/account/preferences'
      preLoaderRoute: typeof loggedInAccountPreferencesImport
      parentRoute: typeof loggedInAccountRouteImport
    }
    '/(loggedIn)/account/security': {
      id: '/(loggedIn)/account/security'
      path: '/security'
      fullPath: '/account/security'
      preLoaderRoute: typeof loggedInAccountSecurityImport
      parentRoute: typeof loggedInAccountRouteImport
    }
    '/(loggedIn)/order/$id': {
      id: '/(loggedIn)/order/$id'
      path: '/order/$id'
      fullPath: '/order/$id'
      preLoaderRoute: typeof loggedInOrderIdImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/product/$id': {
      id: '/(loggedIn)/product/$id'
      path: '/product/$id'
      fullPath: '/product/$id'
      preLoaderRoute: typeof loggedInProductIdImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/account/': {
      id: '/(loggedIn)/account/'
      path: '/'
      fullPath: '/account/'
      preLoaderRoute: typeof loggedInAccountIndexImport
      parentRoute: typeof loggedInAccountRouteImport
    }
    '/(loggedIn)/customer/': {
      id: '/(loggedIn)/customer/'
      path: '/customer'
      fullPath: '/customer'
      preLoaderRoute: typeof loggedInCustomerIndexImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/order/': {
      id: '/(loggedIn)/order/'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof loggedInOrderIndexImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/product/': {
      id: '/(loggedIn)/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof loggedInProductIndexImport
      parentRoute: typeof loggedInRouteImport
    }
  }
}

// Create and export the route tree

interface loggedInAccountRouteRouteChildren {
  loggedInAccountPreferencesRoute: typeof loggedInAccountPreferencesRoute
  loggedInAccountSecurityRoute: typeof loggedInAccountSecurityRoute
  loggedInAccountIndexRoute: typeof loggedInAccountIndexRoute
}

const loggedInAccountRouteRouteChildren: loggedInAccountRouteRouteChildren = {
  loggedInAccountPreferencesRoute: loggedInAccountPreferencesRoute,
  loggedInAccountSecurityRoute: loggedInAccountSecurityRoute,
  loggedInAccountIndexRoute: loggedInAccountIndexRoute,
}

const loggedInAccountRouteRouteWithChildren =
  loggedInAccountRouteRoute._addFileChildren(loggedInAccountRouteRouteChildren)

interface loggedInRouteRouteChildren {
  loggedInAccountRouteRoute: typeof loggedInAccountRouteRouteWithChildren
  loggedInIndexRoute: typeof loggedInIndexRoute
  loggedInOrderIdRoute: typeof loggedInOrderIdRoute
  loggedInProductIdRoute: typeof loggedInProductIdRoute
  loggedInCustomerIndexRoute: typeof loggedInCustomerIndexRoute
  loggedInOrderIndexRoute: typeof loggedInOrderIndexRoute
  loggedInProductIndexRoute: typeof loggedInProductIndexRoute
}

const loggedInRouteRouteChildren: loggedInRouteRouteChildren = {
  loggedInAccountRouteRoute: loggedInAccountRouteRouteWithChildren,
  loggedInIndexRoute: loggedInIndexRoute,
  loggedInOrderIdRoute: loggedInOrderIdRoute,
  loggedInProductIdRoute: loggedInProductIdRoute,
  loggedInCustomerIndexRoute: loggedInCustomerIndexRoute,
  loggedInOrderIndexRoute: loggedInOrderIndexRoute,
  loggedInProductIndexRoute: loggedInProductIndexRoute,
}

const loggedInRouteRouteWithChildren = loggedInRouteRoute._addFileChildren(
  loggedInRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof loggedInIndexRoute
  '/account': typeof loggedInAccountRouteRouteWithChildren
  '/account/preferences': typeof loggedInAccountPreferencesRoute
  '/account/security': typeof loggedInAccountSecurityRoute
  '/order/$id': typeof loggedInOrderIdRoute
  '/product/$id': typeof loggedInProductIdRoute
  '/account/': typeof loggedInAccountIndexRoute
  '/customer': typeof loggedInCustomerIndexRoute
  '/order': typeof loggedInOrderIndexRoute
  '/product': typeof loggedInProductIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof loggedInIndexRoute
  '/account/preferences': typeof loggedInAccountPreferencesRoute
  '/account/security': typeof loggedInAccountSecurityRoute
  '/order/$id': typeof loggedInOrderIdRoute
  '/product/$id': typeof loggedInProductIdRoute
  '/account': typeof loggedInAccountIndexRoute
  '/customer': typeof loggedInCustomerIndexRoute
  '/order': typeof loggedInOrderIndexRoute
  '/product': typeof loggedInProductIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(loggedIn)': typeof loggedInRouteRouteWithChildren
  '/(loggedIn)/account': typeof loggedInAccountRouteRouteWithChildren
  '/(loggedIn)/': typeof loggedInIndexRoute
  '/(loggedIn)/account/preferences': typeof loggedInAccountPreferencesRoute
  '/(loggedIn)/account/security': typeof loggedInAccountSecurityRoute
  '/(loggedIn)/order/$id': typeof loggedInOrderIdRoute
  '/(loggedIn)/product/$id': typeof loggedInProductIdRoute
  '/(loggedIn)/account/': typeof loggedInAccountIndexRoute
  '/(loggedIn)/customer/': typeof loggedInCustomerIndexRoute
  '/(loggedIn)/order/': typeof loggedInOrderIndexRoute
  '/(loggedIn)/product/': typeof loggedInProductIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/account/preferences'
    | '/account/security'
    | '/order/$id'
    | '/product/$id'
    | '/account/'
    | '/customer'
    | '/order'
    | '/product'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account/preferences'
    | '/account/security'
    | '/order/$id'
    | '/product/$id'
    | '/account'
    | '/customer'
    | '/order'
    | '/product'
  id:
    | '__root__'
    | '/(loggedIn)'
    | '/(loggedIn)/account'
    | '/(loggedIn)/'
    | '/(loggedIn)/account/preferences'
    | '/(loggedIn)/account/security'
    | '/(loggedIn)/order/$id'
    | '/(loggedIn)/product/$id'
    | '/(loggedIn)/account/'
    | '/(loggedIn)/customer/'
    | '/(loggedIn)/order/'
    | '/(loggedIn)/product/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  loggedInRouteRoute: typeof loggedInRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  loggedInRouteRoute: loggedInRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(loggedIn)"
      ]
    },
    "/(loggedIn)": {
      "filePath": "(loggedIn)/route.tsx",
      "children": [
        "/(loggedIn)/account",
        "/(loggedIn)/",
        "/(loggedIn)/order/$id",
        "/(loggedIn)/product/$id",
        "/(loggedIn)/customer/",
        "/(loggedIn)/order/",
        "/(loggedIn)/product/"
      ]
    },
    "/(loggedIn)/account": {
      "filePath": "(loggedIn)/account/route.tsx",
      "parent": "/(loggedIn)",
      "children": [
        "/(loggedIn)/account/preferences",
        "/(loggedIn)/account/security",
        "/(loggedIn)/account/"
      ]
    },
    "/(loggedIn)/": {
      "filePath": "(loggedIn)/index.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/account/preferences": {
      "filePath": "(loggedIn)/account/preferences.tsx",
      "parent": "/(loggedIn)/account"
    },
    "/(loggedIn)/account/security": {
      "filePath": "(loggedIn)/account/security.tsx",
      "parent": "/(loggedIn)/account"
    },
    "/(loggedIn)/order/$id": {
      "filePath": "(loggedIn)/order/$id.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/product/$id": {
      "filePath": "(loggedIn)/product/$id.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/account/": {
      "filePath": "(loggedIn)/account/index.tsx",
      "parent": "/(loggedIn)/account"
    },
    "/(loggedIn)/customer/": {
      "filePath": "(loggedIn)/customer/index.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/order/": {
      "filePath": "(loggedIn)/order/index.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/product/": {
      "filePath": "(loggedIn)/product/index.tsx",
      "parent": "/(loggedIn)"
    }
  }
}
ROUTE_MANIFEST_END */

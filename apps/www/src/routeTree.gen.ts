/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CheckoutRouteImport } from './routes/checkout/route'
import { Route as CartRouteImport } from './routes/cart/route'
import { Route as IndexImport } from './routes/index'
import { Route as AccountIndexImport } from './routes/account/index'
import { Route as AccountProfileImport } from './routes/account/profile'
import { Route as AccountOrdersImport } from './routes/account/orders'
import { Route as AccountAddressesImport } from './routes/account/addresses'
import { Route as authLogoutImport } from './routes/(auth)/logout'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const CheckoutRouteRoute = CheckoutRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => rootRoute,
} as any)

const CartRouteRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRoute,
} as any)

const AccountProfileRoute = AccountProfileImport.update({
  id: '/account/profile',
  path: '/account/profile',
  getParentRoute: () => rootRoute,
} as any)

const AccountOrdersRoute = AccountOrdersImport.update({
  id: '/account/orders',
  path: '/account/orders',
  getParentRoute: () => rootRoute,
} as any)

const AccountAddressesRoute = AccountAddressesImport.update({
  id: '/account/addresses',
  path: '/account/addresses',
  getParentRoute: () => rootRoute,
} as any)

const authLogoutRoute = authLogoutImport.update({
  id: '/(auth)/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRoute
    }
    '/checkout': {
      id: '/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/logout': {
      id: '/(auth)/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof authLogoutImport
      parentRoute: typeof rootRoute
    }
    '/account/addresses': {
      id: '/account/addresses'
      path: '/account/addresses'
      fullPath: '/account/addresses'
      preLoaderRoute: typeof AccountAddressesImport
      parentRoute: typeof rootRoute
    }
    '/account/orders': {
      id: '/account/orders'
      path: '/account/orders'
      fullPath: '/account/orders'
      preLoaderRoute: typeof AccountOrdersImport
      parentRoute: typeof rootRoute
    }
    '/account/profile': {
      id: '/account/profile'
      path: '/account/profile'
      fullPath: '/account/profile'
      preLoaderRoute: typeof AccountProfileImport
      parentRoute: typeof rootRoute
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRouteRoute
  '/checkout': typeof CheckoutRouteRoute
  '/login': typeof authLoginRoute
  '/logout': typeof authLogoutRoute
  '/account/addresses': typeof AccountAddressesRoute
  '/account/orders': typeof AccountOrdersRoute
  '/account/profile': typeof AccountProfileRoute
  '/account': typeof AccountIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRouteRoute
  '/checkout': typeof CheckoutRouteRoute
  '/login': typeof authLoginRoute
  '/logout': typeof authLogoutRoute
  '/account/addresses': typeof AccountAddressesRoute
  '/account/orders': typeof AccountOrdersRoute
  '/account/profile': typeof AccountProfileRoute
  '/account': typeof AccountIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cart': typeof CartRouteRoute
  '/checkout': typeof CheckoutRouteRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/logout': typeof authLogoutRoute
  '/account/addresses': typeof AccountAddressesRoute
  '/account/orders': typeof AccountOrdersRoute
  '/account/profile': typeof AccountProfileRoute
  '/account/': typeof AccountIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/checkout'
    | '/login'
    | '/logout'
    | '/account/addresses'
    | '/account/orders'
    | '/account/profile'
    | '/account'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cart'
    | '/checkout'
    | '/login'
    | '/logout'
    | '/account/addresses'
    | '/account/orders'
    | '/account/profile'
    | '/account'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/checkout'
    | '/(auth)/login'
    | '/(auth)/logout'
    | '/account/addresses'
    | '/account/orders'
    | '/account/profile'
    | '/account/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRouteRoute: typeof CartRouteRoute
  CheckoutRouteRoute: typeof CheckoutRouteRoute
  authLoginRoute: typeof authLoginRoute
  authLogoutRoute: typeof authLogoutRoute
  AccountAddressesRoute: typeof AccountAddressesRoute
  AccountOrdersRoute: typeof AccountOrdersRoute
  AccountProfileRoute: typeof AccountProfileRoute
  AccountIndexRoute: typeof AccountIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRouteRoute: CartRouteRoute,
  CheckoutRouteRoute: CheckoutRouteRoute,
  authLoginRoute: authLoginRoute,
  authLogoutRoute: authLogoutRoute,
  AccountAddressesRoute: AccountAddressesRoute,
  AccountOrdersRoute: AccountOrdersRoute,
  AccountProfileRoute: AccountProfileRoute,
  AccountIndexRoute: AccountIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cart",
        "/checkout",
        "/(auth)/login",
        "/(auth)/logout",
        "/account/addresses",
        "/account/orders",
        "/account/profile",
        "/account/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cart": {
      "filePath": "cart/route.tsx"
    },
    "/checkout": {
      "filePath": "checkout/route.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/logout": {
      "filePath": "(auth)/logout.tsx"
    },
    "/account/addresses": {
      "filePath": "account/addresses.tsx"
    },
    "/account/orders": {
      "filePath": "account/orders.tsx"
    },
    "/account/profile": {
      "filePath": "account/profile.tsx"
    },
    "/account/": {
      "filePath": "account/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

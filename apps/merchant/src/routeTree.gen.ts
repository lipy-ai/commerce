/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as loggedInRouteImport } from './routes/(loggedIn)/route'
import { Route as loggedInIndexImport } from './routes/(loggedIn)/index'
import { Route as loggedInCustomersIndexImport } from './routes/(loggedIn)/customers/index'
import { Route as loggedInAccountIndexImport } from './routes/(loggedIn)/account/index'
import { Route as loggedInproductsProductsImport } from './routes/(loggedIn)/(products)/products'
import { Route as loggedInordersOrdersImport } from './routes/(loggedIn)/(orders)/orders'
import { Route as loggedInproductsProductIdImport } from './routes/(loggedIn)/(products)/product.$id'
import { Route as loggedInordersOrderIdImport } from './routes/(loggedIn)/(orders)/order.$id'

// Create/Update Routes

const loggedInRouteRoute = loggedInRouteImport.update({
  id: '/(loggedIn)',
  getParentRoute: () => rootRoute,
} as any)

const loggedInIndexRoute = loggedInIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInCustomersIndexRoute = loggedInCustomersIndexImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInAccountIndexRoute = loggedInAccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInproductsProductsRoute = loggedInproductsProductsImport.update({
  id: '/(products)/products',
  path: '/products',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInordersOrdersRoute = loggedInordersOrdersImport.update({
  id: '/(orders)/orders',
  path: '/orders',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInproductsProductIdRoute = loggedInproductsProductIdImport.update({
  id: '/(products)/product/$id',
  path: '/product/$id',
  getParentRoute: () => loggedInRouteRoute,
} as any)

const loggedInordersOrderIdRoute = loggedInordersOrderIdImport.update({
  id: '/(orders)/order/$id',
  path: '/order/$id',
  getParentRoute: () => loggedInRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(loggedIn)': {
      id: '/(loggedIn)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof loggedInRouteImport
      parentRoute: typeof rootRoute
    }
    '/(loggedIn)/': {
      id: '/(loggedIn)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof loggedInIndexImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/(orders)/orders': {
      id: '/(loggedIn)/(orders)/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof loggedInordersOrdersImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/(products)/products': {
      id: '/(loggedIn)/(products)/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof loggedInproductsProductsImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/account/': {
      id: '/(loggedIn)/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof loggedInAccountIndexImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/customers/': {
      id: '/(loggedIn)/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof loggedInCustomersIndexImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/(orders)/order/$id': {
      id: '/(loggedIn)/(orders)/order/$id'
      path: '/order/$id'
      fullPath: '/order/$id'
      preLoaderRoute: typeof loggedInordersOrderIdImport
      parentRoute: typeof loggedInRouteImport
    }
    '/(loggedIn)/(products)/product/$id': {
      id: '/(loggedIn)/(products)/product/$id'
      path: '/product/$id'
      fullPath: '/product/$id'
      preLoaderRoute: typeof loggedInproductsProductIdImport
      parentRoute: typeof loggedInRouteImport
    }
  }
}

// Create and export the route tree

interface loggedInRouteRouteChildren {
  loggedInIndexRoute: typeof loggedInIndexRoute
  loggedInordersOrdersRoute: typeof loggedInordersOrdersRoute
  loggedInproductsProductsRoute: typeof loggedInproductsProductsRoute
  loggedInAccountIndexRoute: typeof loggedInAccountIndexRoute
  loggedInCustomersIndexRoute: typeof loggedInCustomersIndexRoute
  loggedInordersOrderIdRoute: typeof loggedInordersOrderIdRoute
  loggedInproductsProductIdRoute: typeof loggedInproductsProductIdRoute
}

const loggedInRouteRouteChildren: loggedInRouteRouteChildren = {
  loggedInIndexRoute: loggedInIndexRoute,
  loggedInordersOrdersRoute: loggedInordersOrdersRoute,
  loggedInproductsProductsRoute: loggedInproductsProductsRoute,
  loggedInAccountIndexRoute: loggedInAccountIndexRoute,
  loggedInCustomersIndexRoute: loggedInCustomersIndexRoute,
  loggedInordersOrderIdRoute: loggedInordersOrderIdRoute,
  loggedInproductsProductIdRoute: loggedInproductsProductIdRoute,
}

const loggedInRouteRouteWithChildren = loggedInRouteRoute._addFileChildren(
  loggedInRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof loggedInIndexRoute
  '/orders': typeof loggedInordersOrdersRoute
  '/products': typeof loggedInproductsProductsRoute
  '/account': typeof loggedInAccountIndexRoute
  '/customers': typeof loggedInCustomersIndexRoute
  '/order/$id': typeof loggedInordersOrderIdRoute
  '/product/$id': typeof loggedInproductsProductIdRoute
}

export interface FileRoutesByTo {
  '/': typeof loggedInIndexRoute
  '/orders': typeof loggedInordersOrdersRoute
  '/products': typeof loggedInproductsProductsRoute
  '/account': typeof loggedInAccountIndexRoute
  '/customers': typeof loggedInCustomersIndexRoute
  '/order/$id': typeof loggedInordersOrderIdRoute
  '/product/$id': typeof loggedInproductsProductIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(loggedIn)': typeof loggedInRouteRouteWithChildren
  '/(loggedIn)/': typeof loggedInIndexRoute
  '/(loggedIn)/(orders)/orders': typeof loggedInordersOrdersRoute
  '/(loggedIn)/(products)/products': typeof loggedInproductsProductsRoute
  '/(loggedIn)/account/': typeof loggedInAccountIndexRoute
  '/(loggedIn)/customers/': typeof loggedInCustomersIndexRoute
  '/(loggedIn)/(orders)/order/$id': typeof loggedInordersOrderIdRoute
  '/(loggedIn)/(products)/product/$id': typeof loggedInproductsProductIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/orders'
    | '/products'
    | '/account'
    | '/customers'
    | '/order/$id'
    | '/product/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/orders'
    | '/products'
    | '/account'
    | '/customers'
    | '/order/$id'
    | '/product/$id'
  id:
    | '__root__'
    | '/(loggedIn)'
    | '/(loggedIn)/'
    | '/(loggedIn)/(orders)/orders'
    | '/(loggedIn)/(products)/products'
    | '/(loggedIn)/account/'
    | '/(loggedIn)/customers/'
    | '/(loggedIn)/(orders)/order/$id'
    | '/(loggedIn)/(products)/product/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  loggedInRouteRoute: typeof loggedInRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  loggedInRouteRoute: loggedInRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(loggedIn)"
      ]
    },
    "/(loggedIn)": {
      "filePath": "(loggedIn)/route.tsx",
      "children": [
        "/(loggedIn)/",
        "/(loggedIn)/(orders)/orders",
        "/(loggedIn)/(products)/products",
        "/(loggedIn)/account/",
        "/(loggedIn)/customers/",
        "/(loggedIn)/(orders)/order/$id",
        "/(loggedIn)/(products)/product/$id"
      ]
    },
    "/(loggedIn)/": {
      "filePath": "(loggedIn)/index.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/(orders)/orders": {
      "filePath": "(loggedIn)/(orders)/orders.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/(products)/products": {
      "filePath": "(loggedIn)/(products)/products.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/account/": {
      "filePath": "(loggedIn)/account/index.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/customers/": {
      "filePath": "(loggedIn)/customers/index.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/(orders)/order/$id": {
      "filePath": "(loggedIn)/(orders)/order.$id.tsx",
      "parent": "/(loggedIn)"
    },
    "/(loggedIn)/(products)/product/$id": {
      "filePath": "(loggedIn)/(products)/product.$id.tsx",
      "parent": "/(loggedIn)"
    }
  }
}
ROUTE_MANIFEST_END */
